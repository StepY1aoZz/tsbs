package main

import (
	"bufio"
	"encoding/binary"
	"flag"
	"github.com/valyala/fastjson/fastfloat"
	"log"
	"os"
	"sort"
	"strconv"
	"strings"

	"github.com/timescale/tsbs/pkg/targets/opengemini/record"
)

var MaxRows = flag.Uint("maxrows", 10000, "Max number of rows in single record")

var InputPath = flag.String("input", "", "Input file path. Should be generated by TSBS. left blank if read from STDIN")

var OutputPath = flag.String("out", "", "Output folder. left blank if write to STDOUT")

var (
	tagsMap   = map[string][][]string{}
	fieldsMap = map[string][][]string{}
	timesMap  = map[string][]string{}
)

func main() {
	flag.Parse()
	var scanner *bufio.Scanner
	if *InputPath == "" {
		scanner = bufio.NewScanner(os.Stdin)
	} else {
		input, err := os.Open(*InputPath)
		if err != nil {
			log.Fatal(err)
		}
		defer input.Close()
		scanner = bufio.NewScanner(input)
	}
	var w *os.File
	if *OutputPath == "" {
		w = os.Stdout
	} else {
		f, err := os.OpenFile(*OutputPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()
		w = f
	}
	t := make([]byte, 0)
	t = binary.BigEndian.AppendUint32(t, 0x1225)
	w.Write(t)
	preProcess(scanner, *MaxRows, w)
}

func preProcess(scanner *bufio.Scanner, maxRow uint, w *os.File) {
	for scanner.Scan() {
		line := scanner.Text()
		mst, line, find := strings.Cut(line, ",")
		if !find {
			panic("invalid line protocol")
		}

		contents := strings.Split(line, " ")
		if len(contents) != 3 {
			panic("invalid line protocol")
		}
		tags := strings.Split(contents[0], ",")
		fields := strings.Split(contents[1], ",")
		timeField := contents[2]
		isFull := appendAll(tags, fields, timeField, mst, maxRow)
		if isFull {
			res := toRecordBytes(mst)
			_, err := w.Write(res)
			if err != nil {
				log.Fatal(err)
			}
			resetAll(mst)
		}
	}
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
	for k, v := range timesMap {
		if len(v) == 0 {
			continue
		}
		res := toRecordBytes(k)
		_, err := w.Write(res)
		if err != nil {
			log.Fatal(err)
		}
	}
}

func appendAll(tags, fields []string, timeField string, mst string, maxRow uint) bool {
	_, ok := timesMap[mst]
	if !ok {
		timesMap[mst] = make([]string, 0, maxRow)
		tagsMap[mst] = make([][]string, 0, maxRow)
		fieldsMap[mst] = make([][]string, 0, maxRow)
	}
	timesMap[mst] = append(timesMap[mst], timeField)
	tagsMap[mst] = append(tagsMap[mst], tags)
	fieldsMap[mst] = append(fieldsMap[mst], fields)
	return uint(len(timesMap[mst])) == maxRow
}

func resetAll(mst string) {
	tagsMap[mst] = tagsMap[mst][:0]
	fieldsMap[mst] = fieldsMap[mst][:0]
	timesMap[mst] = timesMap[mst][:0]
}

func toRecordBytes(mst string) []byte {
	idxMap := map[string]int{} // indicates col name to col index, i.e. rec.ColVals[idxMap[col]]
	tags := tagsMap[mst]
	fields := fieldsMap[mst]
	timeFields := timesMap[mst]
	schema := getSchemas(tags[0], fields[0], idxMap) //NOTE: ALL THE ROWS MUST FOLLOW THE SAME SCHEMA!
	rec := record.NewRecordBuilder(schema)

	for i, t := range timeFields {
		currTag := tags[i]
		currField := fields[i]
		for _, tag := range currTag {
			kv := strings.Split(tag, "=")
			k, v := kv[0], kv[1]
			rec.ColVals[idxMap[k]].AppendString(v)
		}
		for _, field := range currField {
			kv := strings.Split(field, "=")
			k, v := kv[0], kv[1]
			currIdx := idxMap[k]
			switch schema[currIdx].Type {
			case record.FieldTypeString:
				val, _ := parseFieldStrValue(v)
				rec.ColVals[currIdx].AppendString(val)
			case record.FieldTypeFloat:
				rec.ColVals[currIdx].AppendFloat(fastfloat.ParseBestEffort(v[:len(v)-1]))
			case record.FieldTypeInt:
				rec.ColVals[currIdx].AppendInteger(fastfloat.ParseInt64BestEffort(v[:len(v)-1]))
			default:
				panic("unknown field type")
			}
		}
		currTime, _ := strconv.ParseInt(t, 10, 64)
		rec.AppendTime(currTime)
	}
	sort.Sort(rec)
	err := record.CheckRecord(rec)
	if err != nil {
		panic(err)
	}
	res := make([]byte, 0)
	size := rec.CodecSize() + (2 * record.SizeOfUint32()) + record.SizeOfString(mst) //length of all following part
	res = record.AppendUint32(res, uint32(size))
	res = record.AppendString(res, mst)
	res = record.AppendUint32(res, uint32(rec.ColVals[0].Len))
	res = record.AppendUint32(res, uint32(len(fields[0])*rec.ColVals[0].Len))
	res, err = rec.Marshal(res)
	if err != nil {
		panic(err)
	}
	return res
}

func getSchemas(tags, fields []string, m map[string]int) record.Schemas {
	res := record.Schemas{}
	for i, tag := range tags {
		t := strings.Split(tag, "=") // 0: ColName, 1: ColVal
		res = append(res, record.Field{Name: t[0], Type: record.FieldTypeTag})
		m[t[0]] = i
	}
	for i, field := range fields {
		t := strings.Split(field, "=")
		_, fieldType, _ := parseFieldNumValue(t[1])
		if fieldType == record.FieldTypeUnknown {
			fieldType = record.FieldTypeString
		}
		res = append(res, record.Field{Name: t[0], Type: int(fieldType)}) // for convenience here
		m[t[0]] = i + len(tags)
	}
	res = append(res, record.Field{Name: record.TimeField, Type: record.FieldTypeInt})
	return res
}
